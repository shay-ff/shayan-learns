"use strict";(self.webpackChunkshayan_learn=self.webpackChunkshayan_learn||[]).push([[109],{1477:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image2-c3352c651717e7cdfa2aa834d0aa7043.png"},1558:e=>{e.exports=JSON.parse('{"permalink":"/shayan-learns/blog/http-server-in-cpp","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-05-30-http-server-in-cpp/index.md","source":"@site/blog/2025-05-30-http-server-in-cpp/index.md","title":"Building an HTTP Server from Scratch in C++","description":"Learn how HTTP really works by building a server in C++.","date":"2025-05-30T00:00:00.000Z","tags":[],"readingTime":2.83,"hasTruncateMarker":false,"authors":[{"name":"Mohammad Ali","title":"Learner and Developer","url":"https://linkedin.com/in/mohmmd-ali","page":{"permalink":"/shayan-learns/blog/authors/mohammad"},"socials":{"linkedin":"https://www.linkedin.com/in/mohmmd-ali/","github":"https://github.com/shay-ff"},"imageURL":"https://i.ibb.co/S48pKcCh/profile-front.jpg","key":"Mohammad"}],"frontMatter":{"title":"Building an HTTP Server from Scratch in C++","description":"Learn how HTTP really works by building a server in C++.","slug":"http-server-in-cpp","date":"2025-05-30T00:00:00.000Z","authors":["Mohammad"]},"unlisted":false}')},5103:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>h});var r=s(1558),i=s(4848),t=s(8453);const a={title:"Building an HTTP Server from Scratch in C++",description:"Learn how HTTP really works by building a server in C++.",slug:"http-server-in-cpp",date:new Date("2025-05-30T00:00:00.000Z"),authors:["Mohammad"]},l="Building an HTTP Server from Scratch in C++",o={authorsImageUrls:[void 0]},h=[{value:"Why Build It?",id:"why-build-it",level:2},{value:"System Overview",id:"system-overview",level:2},{value:"Step-by-Step Breakdown",id:"step-by-step-breakdown",level:2},{value:"1. Startup",id:"1-startup",level:3},{value:"2. Request Parsing",id:"2-request-parsing",level:3},{value:"3. Routing",id:"3-routing",level:3},{value:"4. Response",id:"4-response",level:3},{value:"5. Logging",id:"5-logging",level:3},{value:"What I Learned",id:"what-i-learned",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Future Work",id:"future-work",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Most of us start our web journey with frameworks like Flask, Express, or Spring Boot. But at some point, a question hits you: what if I had to build all this from scratch? No abstractions. No libraries. Just sockets and raw C++. That's exactly what I set out to do."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-build-it",children:"Why Build It?"}),"\n",(0,i.jsx)(n.p,{children:"I wanted to know what really happens when you open a browser and type in a URL. The goal was to learn:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How a server listens for connections"}),"\n",(0,i.jsx)(n.li,{children:"How it reads raw HTTP requests"}),"\n",(0,i.jsx)(n.li,{children:"How it routes those requests"}),"\n",(0,i.jsx)(n.li,{children:"How it sends back HTTP responses"}),"\n",(0,i.jsx)(n.li,{children:"And how it logs everything along the way"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'This is one of those projects where the "hard way" is the best teacher.'}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,i.jsx)(n.p,{children:"Here's a high-level overview of the components involved:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"HTTP Server Architecture",src:s(9374).A+"",width:"1330",height:"756"})}),"\n",(0,i.jsxs)(n.p,{children:["The path ",(0,i.jsx)(n.code,{children:"/app/public/blog/http-server-in-cpp/image1"})," is an absolute path relative to your project root.",(0,i.jsx)(n.br,{}),"\n","You do ",(0,i.jsx)(n.strong,{children:"not"})," need to keep the image in the same directory as your markdown file, but the path must be correct relative to where your static file server expects to find images.",(0,i.jsx)(n.br,{}),"\n","If your static site generator or server serves ",(0,i.jsx)(n.code,{children:"/public"})," as the web root, this path will work.",(0,i.jsx)(n.br,{}),"\n","Otherwise, adjust the path to match your server's configuration or use a relative path if needed (e.g., ",(0,i.jsx)(n.code,{children:"../public/blog/http-server-in-cpp/image1"}),")."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-breakdown",children:"Step-by-Step Breakdown"}),"\n",(0,i.jsx)(n.h3,{id:"1-startup",children:"1. Startup"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"main.cpp"}),", we instantiate the server and start listening:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int main() {\n    HttpServer server(8080);\n    server.start();\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Trigger",src:s(1477).A+"",width:"872",height:"1224"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-request-parsing",children:"2. Request Parsing"}),"\n",(0,i.jsxs)(n.p,{children:["Inside ",(0,i.jsx)(n.code,{children:"http_server.cpp"}),", after accepting a connection:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"char buffer[4096];\nint bytesReceived = recv(clientSocket, buffer, sizeof(buffer) - 1, 0);\nstd::string request(buffer);\nstd::istringstream stream(request);\nstd::string method, path;\nstream >> method >> path;\n"})}),"\n",(0,i.jsx)(n.p,{children:"We parse just the first line of the request to extract the HTTP method and the path."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Parsing",src:s(8588).A+"",width:"960",height:"512"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-routing",children:"3. Routing"}),"\n",(0,i.jsxs)(n.p,{children:["Routing is handled in ",(0,i.jsx)(n.code,{children:"router.cpp"}),". Here's a simplified example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'std::string route(const std::string& path) {\n    if (path == "/") return "HTTP/1.1 200 OK\\r\\n\\r\\nWelcome!";\n    if (path == "/about") return "HTTP/1.1 200 OK\\r\\n\\r\\nAbout this server.";\n    return "HTTP/1.1 404 Not Found\\r\\n\\r\\nPage not found.";\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Routing",src:s(8755).A+"",width:"1006",height:"550"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-response",children:"4. Response"}),"\n",(0,i.jsx)(n.p,{children:"Responses are simple strings \u2014 no fancy abstractions. Just plain HTTP:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'std::string response = "HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello from the server!";\nsend(clientSocket, response.c_str(), response.length(), 0);\n'})}),"\n",(0,i.jsx)(n.p,{children:"That\u2019s all it takes to send data back to the browser."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-logging",children:"5. Logging"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"logger.cpp"}),", we log each request with a timestamp:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'std::ofstream log("server.log", std::ios::app);\nlog << "[" << currentTime() << "] " << method << " " << path << "\\n";\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Logging",src:s(7178).A+"",width:"1380",height:"464"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-i-learned",children:"What I Learned"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Socket programming gives you fine-grained control"}),"\n",(0,i.jsxs)(n.li,{children:["HTTP is simple but precise (every space and ",(0,i.jsx)(n.code,{children:"\\r\\n"})," matters)"]}),"\n",(0,i.jsx)(n.li,{children:"Writing a router makes you appreciate Express"}),"\n",(0,i.jsx)(n.li,{children:"Logs are essential for visibility"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Only supports ",(0,i.jsx)(n.code,{children:"GET"})]}),"\n",(0,i.jsx)(n.li,{children:"Single-threaded (one client at a time)"}),"\n",(0,i.jsx)(n.li,{children:"No persistent connections"}),"\n",(0,i.jsx)(n.li,{children:"No header parsing"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"future-work",children:"Future Work"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add threading"}),"\n",(0,i.jsx)(n.li,{children:"Support POST and headers"}),"\n",(0,i.jsx)(n.li,{children:"Serve static files (HTML, images)"}),"\n",(0,i.jsx)(n.li,{children:"Add configuration options"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This project helped me demystify HTTP and web servers in general. Going low-level gives you insights that high-level frameworks hide. Highly recommended as a weekend project if you're into networks or systems programming."}),"\n",(0,i.jsxs)(n.p,{children:["Thanks for reading!",(0,i.jsx)(n.br,{}),"\n","You can find the implementation here: ",(0,i.jsx)(n.a,{href:"https://github.com/shay-ff/http-server",children:"Github Repo."})]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7178:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image5-aa1702d0aaddfd361979cade279dd49d.png"},8588:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image3-a3c5349e46ff1dd639febc895ff188b3.png"},8755:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image4-f87200a98cb41db9f284ea535c289593.png"},9374:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image1-9179bc574bacaa8f07ee31291cf9da74.png"}}]);