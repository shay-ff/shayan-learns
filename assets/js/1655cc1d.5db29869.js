"use strict";(self.webpackChunkshayan_learn=self.webpackChunkshayan_learn||[]).push([[397],{7034:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"http-server-in-cpp","metadata":{"permalink":"/shayan-learns/blog/http-server-in-cpp","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-05-30-http-server-in-cpp/index.md","source":"@site/blog/2025-05-30-http-server-in-cpp/index.md","title":"Building an HTTP Server from Scratch in C++","description":"Learn how HTTP really works by building a server in C++.","date":"2025-05-30T00:00:00.000Z","tags":[],"readingTime":2.83,"hasTruncateMarker":false,"authors":[{"name":"Mohammad Ali","title":"Learner and Developer","url":"https://linkedin.com/in/mohmmd-ali","page":{"permalink":"/shayan-learns/blog/authors/mohammad"},"socials":{"linkedin":"https://www.linkedin.com/in/mohmmd-ali/","github":"https://github.com/shay-ff"},"imageURL":"https://i.ibb.co/S48pKcCh/profile-front.jpg","key":"Mohammad"}],"frontMatter":{"title":"Building an HTTP Server from Scratch in C++","description":"Learn how HTTP really works by building a server in C++.","slug":"http-server-in-cpp","date":"2025-05-30T00:00:00.000Z","authors":["Mohammad"]},"unlisted":false},"content":"Most of us start our web journey with frameworks like Flask, Express, or Spring Boot. But at some point, a question hits you: what if I had to build all this from scratch? No abstractions. No libraries. Just sockets and raw C++. That\'s exactly what I set out to do.\\n\\n---\\nWhy Build It?\\n-------------\\n\\nI wanted to know what really happens when you open a browser and type in a URL. The goal was to learn:\\n\\n- How a server listens for connections\\n- How it reads raw HTTP requests\\n- How it routes those requests\\n- How it sends back HTTP responses\\n- And how it logs everything along the way\\n\\nThis is one of those projects where the \\"hard way\\" is the best teacher.\\n\\n---\\n\\nSystem Overview\\n---------------\\n\\nHere\'s a high-level overview of the components involved:\\n\\n\\n![HTTP Server Architecture](./image1.png)\\n\\nThe path `/app/public/blog/http-server-in-cpp/image1` is an absolute path relative to your project root.  \\nYou do **not** need to keep the image in the same directory as your markdown file, but the path must be correct relative to where your static file server expects to find images.  \\nIf your static site generator or server serves `/public` as the web root, this path will work.  \\nOtherwise, adjust the path to match your server\'s configuration or use a relative path if needed (e.g., `../public/blog/http-server-in-cpp/image1`).\\n\\n---\\n\\nStep-by-Step Breakdown\\n-----------------------\\n\\n### 1. Startup\\n\\nIn `main.cpp`, we instantiate the server and start listening:\\n\\n```cpp\\nint main() {\\n    HttpServer server(8080);\\n    server.start();\\n    return 0;\\n}\\n```\\n\\n![Trigger](./image2.png)\\n\\n---\\n\\n### 2. Request Parsing\\n\\nInside `http_server.cpp`, after accepting a connection:\\n\\n```cpp\\nchar buffer[4096];\\nint bytesReceived = recv(clientSocket, buffer, sizeof(buffer) - 1, 0);\\nstd::string request(buffer);\\nstd::istringstream stream(request);\\nstd::string method, path;\\nstream >> method >> path;\\n```\\n\\nWe parse just the first line of the request to extract the HTTP method and the path.\\n\\n![Parsing](./image3.png)\\n\\n---\\n\\n### 3. Routing\\n\\nRouting is handled in `router.cpp`. Here\'s a simplified example:\\n\\n```cpp\\nstd::string route(const std::string& path) {\\n    if (path == \\"/\\") return \\"HTTP/1.1 200 OK\\\\r\\\\n\\\\r\\\\nWelcome!\\";\\n    if (path == \\"/about\\") return \\"HTTP/1.1 200 OK\\\\r\\\\n\\\\r\\\\nAbout this server.\\";\\n    return \\"HTTP/1.1 404 Not Found\\\\r\\\\n\\\\r\\\\nPage not found.\\";\\n}\\n```\\n\\n![Routing](./image4.png)\\n\\n---\\n\\n### 4. Response\\n\\nResponses are simple strings \u2014 no fancy abstractions. Just plain HTTP:\\n\\n```cpp\\nstd::string response = \\"HTTP/1.1 200 OK\\\\r\\\\nContent-Type: text/plain\\\\r\\\\n\\\\r\\\\nHello from the server!\\";\\nsend(clientSocket, response.c_str(), response.length(), 0);\\n```\\n\\nThat\u2019s all it takes to send data back to the browser.\\n\\n---\\n\\n### 5. Logging\\n\\nIn `logger.cpp`, we log each request with a timestamp:\\n\\n```cpp\\nstd::ofstream log(\\"server.log\\", std::ios::app);\\nlog << \\"[\\" << currentTime() << \\"] \\" << method << \\" \\" << path << \\"\\\\n\\";\\n```\\n\\n![Logging](./image5.png)\\n\\n---\\n\\nWhat I Learned\\n--------------\\n\\n- Socket programming gives you fine-grained control\\n- HTTP is simple but precise (every space and `\\\\r\\\\n` matters)\\n- Writing a router makes you appreciate Express\\n- Logs are essential for visibility\\n\\n---\\n\\nLimitations\\n-----------\\n\\n- Only supports `GET`\\n- Single-threaded (one client at a time)\\n- No persistent connections\\n- No header parsing\\n\\n---\\n\\nFuture Work\\n-----------\\n\\n- Add threading\\n- Support POST and headers\\n- Serve static files (HTML, images)\\n- Add configuration options\\n\\n---\\n\\nConclusion\\n----------\\n\\nThis project helped me demystify HTTP and web servers in general. Going low-level gives you insights that high-level frameworks hide. Highly recommended as a weekend project if you\'re into networks or systems programming.\\n\\nThanks for reading!  \\nYou can find the implementation here: [Github Repo.](https://github.com/shay-ff/http-server)"}]}}')}}]);