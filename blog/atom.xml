<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shay-ff.github.io/shayan-learns/blog</id>
    <title>Hello! Blog</title>
    <updated>2025-05-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shay-ff.github.io/shayan-learns/blog"/>
    <subtitle>Hello! Blog</subtitle>
    <icon>https://shay-ff.github.io/shayan-learns/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Building an HTTP Server from Scratch in C++]]></title>
        <id>https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp</id>
        <link href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp"/>
        <updated>2025-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how HTTP really works by building a server in C++.]]></summary>
        <content type="html"><![CDATA[<p>Most of us start our web journey with frameworks like Flask, Express, or Spring Boot. But at some point, a question hits you: what if I had to build all this from scratch? No abstractions. No libraries. Just sockets and raw C++. That's exactly what I set out to do.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-build-it">Why Build It?<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#why-build-it" class="hash-link" aria-label="Direct link to Why Build It?" title="Direct link to Why Build It?">​</a></h2>
<p>I wanted to know what really happens when you open a browser and type in a URL. The goal was to learn:</p>
<ul>
<li>How a server listens for connections</li>
<li>How it reads raw HTTP requests</li>
<li>How it routes those requests</li>
<li>How it sends back HTTP responses</li>
<li>And how it logs everything along the way</li>
</ul>
<p>This is one of those projects where the "hard way" is the best teacher.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="system-overview">System Overview<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#system-overview" class="hash-link" aria-label="Direct link to System Overview" title="Direct link to System Overview">​</a></h2>
<p>Here's a high-level overview of the components involved:</p>
<p><img decoding="async" loading="lazy" alt="HTTP Server Architecture" src="https://shay-ff.github.io/shayan-learns/assets/images/image1-9179bc574bacaa8f07ee31291cf9da74.png" width="1330" height="756" class="img_ev3q"></p>
<p>The path <code>/app/public/blog/http-server-in-cpp/image1</code> is an absolute path relative to your project root.<br>
<!-- -->You do <strong>not</strong> need to keep the image in the same directory as your markdown file, but the path must be correct relative to where your static file server expects to find images.<br>
<!-- -->If your static site generator or server serves <code>/public</code> as the web root, this path will work.<br>
<!-- -->Otherwise, adjust the path to match your server's configuration or use a relative path if needed (e.g., <code>../public/blog/http-server-in-cpp/image1</code>).</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-breakdown">Step-by-Step Breakdown<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#step-by-step-breakdown" class="hash-link" aria-label="Direct link to Step-by-Step Breakdown" title="Direct link to Step-by-Step Breakdown">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-startup">1. Startup<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#1-startup" class="hash-link" aria-label="Direct link to 1. Startup" title="Direct link to 1. Startup">​</a></h3>
<p>In <code>main.cpp</code>, we instantiate the server and start listening:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HttpServer </span><span class="token function" style="color:#d73a49">server</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">8080</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" alt="Trigger" src="https://shay-ff.github.io/shayan-learns/assets/images/image2-c3352c651717e7cdfa2aa834d0aa7043.png" width="872" height="1224" class="img_ev3q"></p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-request-parsing">2. Request Parsing<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#2-request-parsing" class="hash-link" aria-label="Direct link to 2. Request Parsing" title="Direct link to 2. Request Parsing">​</a></h3>
<p>Inside <code>http_server.cpp</code>, after accepting a connection:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4096</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> bytesReceived </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">clientSocket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buffer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">string </span><span class="token function" style="color:#d73a49">request</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buffer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">istringstream </span><span class="token function" style="color:#d73a49">stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">string method</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stream </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> method </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>We parse just the first line of the request to extract the HTTP method and the path.</p>
<p><img decoding="async" loading="lazy" alt="Parsing" src="https://shay-ff.github.io/shayan-learns/assets/images/image3-a3c5349e46ff1dd639febc895ff188b3.png" width="960" height="512" class="img_ev3q"></p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-routing">3. Routing<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#3-routing" class="hash-link" aria-label="Direct link to 3. Routing" title="Direct link to 3. Routing">​</a></h3>
<p>Routing is handled in <code>router.cpp</code>. Here's a simplified example:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">string </span><span class="token function" style="color:#d73a49">route</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">string</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HTTP/1.1 200 OK\r\n\r\nWelcome!"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/about"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HTTP/1.1 200 OK\r\n\r\nAbout this server."</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HTTP/1.1 404 Not Found\r\n\r\nPage not found."</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" alt="Routing" src="https://shay-ff.github.io/shayan-learns/assets/images/image4-f87200a98cb41db9f284ea535c289593.png" width="1006" height="550" class="img_ev3q"></p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-response">4. Response<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#4-response" class="hash-link" aria-label="Direct link to 4. Response" title="Direct link to 4. Response">​</a></h3>
<p>Responses are simple strings — no fancy abstractions. Just plain HTTP:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">string response </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nHello from the server!"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">clientSocket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">c_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">length</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>That’s all it takes to send data back to the browser.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-logging">5. Logging<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#5-logging" class="hash-link" aria-label="Direct link to 5. Logging" title="Direct link to 5. Logging">​</a></h3>
<p>In <code>logger.cpp</code>, we log each request with a timestamp:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">ofstream </span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"server.log"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">ios</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"["</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">currentTime</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"] "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> method </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">" "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> path </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\n"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p><img decoding="async" loading="lazy" alt="Logging" src="https://shay-ff.github.io/shayan-learns/assets/images/image5-aa1702d0aaddfd361979cade279dd49d.png" width="1380" height="464" class="img_ev3q"></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-i-learned">What I Learned<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#what-i-learned" class="hash-link" aria-label="Direct link to What I Learned" title="Direct link to What I Learned">​</a></h2>
<ul>
<li>Socket programming gives you fine-grained control</li>
<li>HTTP is simple but precise (every space and <code>\r\n</code> matters)</li>
<li>Writing a router makes you appreciate Express</li>
<li>Logs are essential for visibility</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="limitations">Limitations<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#limitations" class="hash-link" aria-label="Direct link to Limitations" title="Direct link to Limitations">​</a></h2>
<ul>
<li>Only supports <code>GET</code></li>
<li>Single-threaded (one client at a time)</li>
<li>No persistent connections</li>
<li>No header parsing</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-work">Future Work<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#future-work" class="hash-link" aria-label="Direct link to Future Work" title="Direct link to Future Work">​</a></h2>
<ul>
<li>Add threading</li>
<li>Support POST and headers</li>
<li>Serve static files (HTML, images)</li>
<li>Add configuration options</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://shay-ff.github.io/shayan-learns/blog/http-server-in-cpp#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>This project helped me demystify HTTP and web servers in general. Going low-level gives you insights that high-level frameworks hide. Highly recommended as a weekend project if you're into networks or systems programming.</p>
<p>Thanks for reading!<br>
<!-- -->You can find the implementation here: <a href="https://github.com/shay-ff/http-server" target="_blank" rel="noopener noreferrer">Github Repo.</a></p>]]></content>
        <author>
            <name>Mohammad Ali</name>
            <uri>https://linkedin.com/in/mohmmd-ali</uri>
        </author>
    </entry>
</feed>